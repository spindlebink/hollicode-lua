{"header":{"version":"0.1.0","bytecodeVersion":"0.1.0"},"instructions":[["STR","This is a Hollicode script testing environment. You can edit the script in `script.hlc`, then recompile it via the Hollicode compiler into `script.hlcj`, then reload the LÖVE project."],"ECHO",["STR","Tell me about Hollicode."],["OPT",1],["JMP",91],["GETV","no_more_second_level_options"],["FJMP",6],"POP",["STR","Well, you've been through the whole spiel already, so why not just scroll up and re-read it?"],"ECHO",["TJMP",-8],["JMP",6],"POP",["STR","Hollicode is a programming language for composing interactive narratives. It's designed to stay out of your way and let you write systemic, branching narratives in a way that reads like plain text most of the time."],"ECHO",["STR","The Hollicode compiler is written in Crystal. It compiles Hollicode source into a super-simple, super-portable bytecode format which can be loaded in your game engine of choice. There's currently a full Lua-based interpreter available, but I've also got a mostly-complete GDScript interpreter in the works. Interpreter development happens on an as-needed basis for my personal projects."],"ECHO",["GETV","no_more_second_level_options"],"NOT",["FJMP",74],"POP",["GETV","selected_integrate"],"NOT",["FJMP",13],"POP",["STR","How do I integrate an interpreter into my game?"],["OPT",1],["JMP",8],["STR","selected_integrate"],["GETV","set"],["CALL",1],["STR","The interpreter doesn't do any displaying or input of its own. Instead, interpreters leave implementation details up to the developer. For example, the project you're running right now is mostly non-Hollicode-specific code for LÖVE that loads up a rich text buffer, display system, and input, then hooks that buffer in to interpreter callbacks. The interpreter's only in charge of program flow."],"ECHO",["TJMP",-16],"RET",["JMP",2],"POP",["GETV","selected_useful"],"NOT",["FJMP",13],"POP",["STR","On what occasions would something like Hollicode be useful?"],["OPT",1],["JMP",8],["STR","selected_useful"],["GETV","set"],["CALL",1],["STR","Anywhere that'd be improved with branching dialog. If you've ever used Ink or Yarnspinner, Hollicode is like a more ergonomic, more portable alternative."],"ECHO",["TJMP",-32],"RET",["JMP",2],"POP",["GETV","selected_performance"],"NOT",["FJMP",15],"POP",["STR","Wait, isn't writing an interpreter in a scripting language going to be slow?"],["OPT",1],["JMP",10],["STR","selected_performance"],["GETV","set"],["CALL",1],["STR","Ordinarily, maybe. But Hollicode's domain is highly limited. You shouldn't be writing your whole game's logic in Hollicode. Based on where you place options and wait for input, the interpreter will likely only be executing a couple dozen non-performance-sensitive instructions at a time."],"ECHO",["STR","Hollicode intentionally doesn't provide a dedicated way to write functions or set variables, although both can be done with a little creativity. The intent is to offload game-specific logic to the game programmer. If you find yourself trying to emulate function-like structures in pure Hollicode, odds are you should instead implement that functionality in your game engine's scripting language of choice and hook into it from Hollicode instead."],"ECHO",["TJMP",-50],"RET",["JMP",2],"POP",["GETV","selected_performance"],["GETV","selected_useful"],["GETV","selected_integrate"],["BOP","&&"],["BOP","&&"],["FJMP",9],"POP",["STR","no_more_second_level_options"],["GETV","set"],["CALL",1],["STR","I think that's it, as far as broader, conceptual questions go. Anything else?"],"ECHO",["TJMP",-81],["JMP",7],"POP",["STR","I have something else to ask."],["OPT",1],["JMP",3],["TJMP",-87],"RET","WAIT",["JMP",2],"POP","RET",["STR","This seems kind of cool."],["OPT",1],["JMP",7],["STR","Doesn't it? The language is in development for a game I'm working on called *Hollico*. That's where the name comes from. I suffer from an issue common to a lot of game developers--it's nearly as fun to make tooling as it is to make a real game. Hence a full compiler for something that could've just been done in script."],"ECHO",["STR","Still, it makes future work much easier. And it's cool."],"ECHO",["TJMP",-100],"RET",["STR","What's the license?"],["OPT",1],["JMP",9],["STR","The compiler itself (i.e. the Crystal code comprising it) is licensed under the Affero GPL, version 3.0. That means if you use the compiler directly from your project, you'll need to open source your project and also license it under the AGPL."],"ECHO",["STR","If you don't like copyleft, don't worry: the generated bytecode isn't under the AGPL, and neither is the Lua interpreter in this repository. The interpreter's plain old MIT, and as for generated bytecode, that's your own."],"ECHO",["STR","I'm of the opinion that all software should be open source (and copyleft), but I also try to be realistic. If you've got any questions about licensing, feel free to ask. Raise a GitHub issue, maybe."],"ECHO",["TJMP",-111],"RET","WAIT"]}